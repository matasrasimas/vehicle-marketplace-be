/*
 * This file is generated by jOOQ.
 */
package org.example.generated.jooq.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.example.generated.jooq.DefaultSchema;
import org.example.generated.jooq.Keys;
import org.example.generated.jooq.tables.Categories.CategoriesPath;
import org.example.generated.jooq.tables.Comments.CommentsPath;
import org.example.generated.jooq.tables.Users.UsersPath;
import org.example.generated.jooq.tables.records.PostsRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Posts extends TableImpl<PostsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>posts</code>
     */
    public static final Posts POSTS = new Posts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PostsRecord> getRecordType() {
        return PostsRecord.class;
    }

    /**
     * The column <code>posts.id</code>.
     */
    public final TableField<PostsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>posts.category_id</code>.
     */
    public final TableField<PostsRecord, UUID> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>posts.user_id</code>.
     */
    public final TableField<PostsRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>posts.description</code>.
     */
    public final TableField<PostsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>posts.brand</code>.
     */
    public final TableField<PostsRecord, String> BRAND = createField(DSL.name("brand"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>posts.model</code>.
     */
    public final TableField<PostsRecord, String> MODEL = createField(DSL.name("model"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>posts.manufacture_year</code>.
     */
    public final TableField<PostsRecord, Integer> MANUFACTURE_YEAR = createField(DSL.name("manufacture_year"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>posts.mileage</code>.
     */
    public final TableField<PostsRecord, Double> MILEAGE = createField(DSL.name("mileage"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>posts.price</code>.
     */
    public final TableField<PostsRecord, Double> PRICE = createField(DSL.name("price"), SQLDataType.DOUBLE.nullable(false), this, "");

    private Posts(Name alias, Table<PostsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Posts(Name alias, Table<PostsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>posts</code> table reference
     */
    public Posts(String alias) {
        this(DSL.name(alias), POSTS);
    }

    /**
     * Create an aliased <code>posts</code> table reference
     */
    public Posts(Name alias) {
        this(alias, POSTS);
    }

    /**
     * Create a <code>posts</code> table reference
     */
    public Posts() {
        this(DSL.name("posts"), null);
    }

    public <O extends Record> Posts(Table<O> path, ForeignKey<O, PostsRecord> childPath, InverseForeignKey<O, PostsRecord> parentPath) {
        super(path, childPath, parentPath, POSTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PostsPath extends Posts implements Path<PostsRecord> {
        public <O extends Record> PostsPath(Table<O> path, ForeignKey<O, PostsRecord> childPath, InverseForeignKey<O, PostsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PostsPath(Name alias, Table<PostsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PostsPath as(String alias) {
            return new PostsPath(DSL.name(alias), this);
        }

        @Override
        public PostsPath as(Name alias) {
            return new PostsPath(alias, this);
        }

        @Override
        public PostsPath as(Table<?> alias) {
            return new PostsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<PostsRecord> getPrimaryKey() {
        return Keys.POSTS_PKEY;
    }

    @Override
    public List<ForeignKey<PostsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.POSTS__POSTS_CATEGORY_ID_FKEY, Keys.POSTS__POSTS_USER_ID_FKEY);
    }

    private transient CategoriesPath _categories;

    /**
     * Get the implicit join path to the <code>public.categories</code> table.
     */
    public CategoriesPath categories() {
        if (_categories == null)
            _categories = new CategoriesPath(this, Keys.POSTS__POSTS_CATEGORY_ID_FKEY, null);

        return _categories;
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.POSTS__POSTS_USER_ID_FKEY, null);

        return _users;
    }

    private transient CommentsPath _comments;

    /**
     * Get the implicit to-many join path to the <code>public.comments</code>
     * table
     */
    public CommentsPath comments() {
        if (_comments == null)
            _comments = new CommentsPath(this, null, Keys.COMMENTS__COMMENTS_POST_ID_FKEY.getInverseKey());

        return _comments;
    }

    @Override
    public Posts as(String alias) {
        return new Posts(DSL.name(alias), this);
    }

    @Override
    public Posts as(Name alias) {
        return new Posts(alias, this);
    }

    @Override
    public Posts as(Table<?> alias) {
        return new Posts(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Posts rename(String name) {
        return new Posts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Posts rename(Name name) {
        return new Posts(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Posts rename(Table<?> name) {
        return new Posts(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Posts where(Condition condition) {
        return new Posts(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Posts where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Posts where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Posts where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Posts where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Posts where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Posts where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Posts where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Posts whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Posts whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
